@page "/"
@rendermode InteractiveServer // maybe change later when we have built the api (and can use WASM)

@using Markdig;

@inject IBlogApi _api

<Virtualize ItemsProvider="LoadPosts" Context="p">
    @* <li><a href="/Post/@p.Id">@p.Title</a></li> *@
    <article>
        <h2>@p.Title</h2>
        @((MarkupString)Markdig.Markdown.ToHtml(new string(p.Text.Take(100).Append('.').Append('.').Append('.').ToArray()), pipeline))
        <a href="/Post/@p.Id">Read more</a>
    </article>
</Virtualize>

@code {
    protected List<BlogPost> posts = new();
    public int TotalBlogPosts { get; set; }
    MarkdownPipeline? pipeline;
    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();
        return base.OnInitializedAsync();
    }
    
    private async ValueTask<ItemsProviderResult<BlogPost>> LoadPosts(ItemsProviderRequest request) 
    {
        if (TotalBlogPosts == 0) 
        {
            TotalBlogPosts = await _api.GetBlogPostCountAsync();
        }    

        var numBlogPosts = Math.Min(request.Count, TotalBlogPosts - request.StartIndex);
        var blogPosts = await _api.GetBlogPostsAsync(numBlogPosts, request.StartIndex);
        return new ItemsProviderResult<BlogPost>(blogPosts, TotalBlogPosts);
    }
}