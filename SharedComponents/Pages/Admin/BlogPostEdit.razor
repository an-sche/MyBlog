@page "/admin/blogposts/new"
@page "/admin/blogposts/{Id}"
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject IBlogNotificationService _notification
@inject IBrowserStorage _storage
@inject IBlogApi _api
@inject NavigationManager _navigation

@using Markdig;
@using SharedComponents.Interfaces;
@using Microsoft.AspNetCore.Components.Forms

@attribute [Authorize]

<EditForm Model="@Post" OnValidSubmit="@SavePostAsync">
    <DataAnnotationsValidator />
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider"/>
    <BlogNavigationLock @ref="NavigationLock" />

    <BlogInputText @bind-Value="@Post.Title" Label="Title" />

    <InputDate @bind-Value="@Post.PublishDate" />
    <ValidationMessage For="@(()=>Post.PublishDate)" />

    <InputSelect @bind-Value="@selectedCategory">
        <option value="0" disabled>None Selected</option>
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </InputSelect>

    <ul>
        @foreach (var tag in Tags) 
        {
            <li>
                @tag.Name
                @if (Post.Tags.Any(t => t.Id == tag.Id)) 
                {
                    <button type="button" @onclick="@(() => { Post.Tags.Remove(Post.Tags.Single(t => t.Id == tag.Id)); })">Remove</button>
                }
                else
                {
                    <button type="button" @onclick="@(() => { Post.Tags.Add(tag); })">Add</button>
                }
            </li>
        }
    </ul>
    
    <InputTextAreaOnInput @bind-Value="@Post.Text" @onkeyup="@UpdateHtmlAsync" />
    <ValidationMessage For="@(() => Post.Text)" />

    <BlogButton Type="BlogButton.ButtonType.Save">Save</BlogButton>

</EditForm>

@if (!string.IsNullOrEmpty(markDownAsHTML))
{    
    @((MarkupString)markDownAsHTML)
}

@code {
    [Parameter]
    public string? Id { get; set; }
    BlogPost Post { get; set; } = new();
    List<Category> Categories { get; set; } = new();
    List<Tag> Tags { get; set; } = new();

    BlogNavigationLock? NavigationLock { get; set; }

    string? selectedCategory = null;
    string? markDownAsHTML { get; set; }

    MarkdownPipeline pipeline = default!;
    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();
        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null) 
        {
            var p = await _api.GetBlogPostAsync(Id);
            if (p != null)
            {
                Post = p;
                if (Post.Category != null)
                {
                    selectedCategory = Post.Category.Id;
                }
                await UpdateHtmlAsync();
            }
        }

        Categories = await _api.GetCategoriesAsync();
        Tags = await _api.GetTagsAsync();
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender && string.IsNullOrEmpty(Id)) 
        {
            var saved = await _storage.GetAsync<BlogPost>("EditCurrentPost");
            if (saved != null) 
            {
                Post = saved;
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task SavePostAsync()
    {

        if (!string.IsNullOrEmpty(selectedCategory) && Categories != null) 
        {
            var category = Categories.FirstOrDefault(c => c.Id == selectedCategory);
            if (category != null) 
            {
                Post.Category = category;
            }
        }
        await _api.SaveBlogPostAsync(Post);
        NavigationLock?.CurrentEditContext.MarkAsUnmodified();
        _navigation.NavigateTo("/admin/blogposts");
    }

    protected async Task UpdateHtmlAsync()
    {
        if (!string.IsNullOrEmpty(Post.Text)) 
        {
            await _notification.SendNotification(Post);
            markDownAsHTML = Markdig.Markdown.ToHtml(Post.Text, pipeline);
            if (string.IsNullOrEmpty(Post.Id))
            {
                await _storage.SetAsync("EditCurrentPost", Post);
            }
        }
    }
}
