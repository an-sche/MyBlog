@page "/admin/tags"
@rendermode InteractiveAuto

@inject IBlogApi _api
@attribute [Authorize]

<h3>Tags</h3>

<EditForm OnValidSubmit="Save" Model="Item">
    <DataAnnotationsValidator />
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

    <BlogInputText @bind-Value="@Item.Name" Label="Name" />

    <BlogButton Type="BlogButton.ButtonType.Save">Save</BlogButton>
</EditForm>

<ItemList Items="@Items" SelectEvent="@Select" DeleteEvent="@Delete" ItemType="Tag">
    <ItemTemplate>
        @{
            var item = context as Tag;
            if (item != null) 
            {
                @item.Name
            }
        }
    </ItemTemplate>
</ItemList>

@code {

    private List<Tag> Items { get; set; } = new();
    public Tag Item { get ; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        Items = (await _api.GetTagsAsync()) ?? new();
        await base.OnInitializedAsync();
    }


    private async Task Delete(Tag tag) 
    {
        try
        {
            await _api.DeleteTagAsync(tag.Id!);
            Items.Remove(tag);
        }
        catch { }
    }

    private async Task Save() 
    {
        try 
        {
            await _api.SaveTagAsync(Item);
            if (!Items.Contains(Item)) 
            {
                Items.Add(Item);
            }
            this.Item = new Tag();
        }
        catch { }
    }

    private Task Select(Tag tag) 
    {
        try
        {
            Item = tag;
        }
        catch { }
        return Task.CompletedTask;
    }
}
